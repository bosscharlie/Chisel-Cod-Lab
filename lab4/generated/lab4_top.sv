// Generated by CIRCT firtool-1.38.0
// external module pll_example

// external module sram_tester

// external module wb_mux_2

// external module TriStateGate

module SramController(
  input         clock,
                reset,
                io_wb_stb_i,
                io_wb_cyc_i,
  input  [31:0] io_wb_adr_i,
  input         io_wb_we_i,
  input  [31:0] io_wb_dat_i,
  input  [3:0]  io_wb_sel_i,
  inout  [31:0] io_sram_io_ram_data,
  output        io_wb_ack_o,
  output [31:0] io_wb_dat_o,
  output [19:0] io_sram_io_ram_addr,
  output [3:0]  io_sram_io_ram_be_n,
  output        io_sram_io_ram_ce_n,
                io_sram_io_ram_oe_n,
                io_sram_io_ram_we_n
);

  wire [31:0] _tri_dataout;
  reg  [2:0]  stateReg;
  reg  [31:0] rdData;
  wire        _T_22 = stateReg == 3'h2;
  wire        _io_sram_io_ram_ce_n_T_1 = stateReg == 3'h6;
  always @(posedge clock) begin
    if (reset) begin
      stateReg <= 3'h0;
      rdData <= 32'h0;
    end
    else begin
      if (|stateReg) begin
        automatic logic [7:0][2:0] _GEN =
          {{stateReg}, {3'h0}, {3'h6}, {3'h5}, {3'h4}, {3'h6}, {3'h2}, {stateReg}};
        stateReg <= _GEN[stateReg];
      end
      else if (io_wb_stb_i & io_wb_cyc_i)
        stateReg <= {1'h0, io_wb_we_i, 1'h1};
      if (_T_22)
        rdData <= _tri_dataout;
    end
  end // always @(posedge)
  TriStateGate tri_0 (
    .triData (io_sram_io_ram_data),
    .dataz   (stateReg == 3'h1 | _T_22),
    .datain  (io_wb_dat_i),
    .dataout (_tri_dataout)
  );
  assign io_wb_ack_o = _io_sram_io_ram_ce_n_T_1;
  assign io_wb_dat_o = rdData;
  assign io_sram_io_ram_addr = io_wb_adr_i[21:2];
  assign io_sram_io_ram_be_n = ~io_wb_sel_i;
  assign io_sram_io_ram_ce_n = ~(|stateReg) | _io_sram_io_ram_ce_n_T_1;
  assign io_sram_io_ram_oe_n = stateReg != 3'h1 & stateReg != 3'h2;
  assign io_sram_io_ram_we_n = stateReg != 3'h4;
endmodule

module lab4_top(
  input         clk_50M,
                clk_11M0592,
                push_btn,
                reset_btn,
  input  [3:0]  touch_btn,
  input  [31:0] dip_sw,
  inout  [31:0] base_ram_data,
                ext_ram_data,
  output [15:0] leds,
  output [7:0]  dpy0,
                dpy1,
  output        uart_rdn,
                uart_wrn,
  output [19:0] base_ram_addr,
  output [3:0]  base_ram_be_n,
  output        base_ram_ce_n,
                base_ram_oe_n,
                base_ram_we_n,
  output [19:0] ext_ram_addr,
  output [3:0]  ext_ram_be_n,
  output        ext_ram_ce_n,
                ext_ram_oe_n,
                ext_ram_we_n
);

  wire        _sram_controller_ext_io_wb_ack_o;
  wire [31:0] _sram_controller_ext_io_wb_dat_o;
  wire        _sram_controller_base_io_wb_ack_o;
  wire [31:0] _sram_controller_base_io_wb_dat_o;
  wire [31:0] _wb_mux_wbm_dat_o;
  wire        _wb_mux_wbm_ack_o;
  wire [31:0] _wb_mux_wbs0_adr_o;
  wire [31:0] _wb_mux_wbs0_dat_o;
  wire        _wb_mux_wbs0_we_o;
  wire [3:0]  _wb_mux_wbs0_sel_o;
  wire        _wb_mux_wbs0_stb_o;
  wire        _wb_mux_wbs0_cyc_o;
  wire [31:0] _wb_mux_wbs1_adr_o;
  wire [31:0] _wb_mux_wbs1_dat_o;
  wire        _wb_mux_wbs1_we_o;
  wire [3:0]  _wb_mux_wbs1_sel_o;
  wire        _wb_mux_wbs1_stb_o;
  wire        _wb_mux_wbs1_cyc_o;
  wire        _u_sram_tester_wb_cyc_o;
  wire        _u_sram_tester_wb_stb_o;
  wire [31:0] _u_sram_tester_wb_adr_o;
  wire [31:0] _u_sram_tester_wb_dat_o;
  wire [3:0]  _u_sram_tester_wb_sel_o;
  wire        _u_sram_tester_wb_we_o;
  wire        _u_sram_tester_done;
  wire        _u_sram_tester_error;
  wire        _clock_gen_clk_out1;
  wire        _clock_gen_locked;
  reg         reset_of_clock10M;
  always @(posedge _clock_gen_clk_out1) begin
    if (reset_btn)
      reset_of_clock10M <= 1'h0;
    else
      reset_of_clock10M <= ~_clock_gen_locked;
  end // always @(posedge)
  pll_example clock_gen (
    .clk_in1  (clk_50M),
    .reset    (reset_btn),
    .clk_out1 (_clock_gen_clk_out1),
    .clk_out2 (/* unused */),
    .locked   (_clock_gen_locked)
  );
  sram_tester #(
    .ADDR_BASE("32'h8000_0000"),
    .ADDR_MASK("32'h007F_FFFF")
  ) u_sram_tester (
    .clk_i               (_clock_gen_clk_out1),
    .rst_i               (reset_of_clock10M),
    .wb_ack_i            (_wb_mux_wbm_ack_o),
    .wb_dat_i            (_wb_mux_wbm_dat_o),
    .start               (push_btn),
    .random_seed         (dip_sw),
    .wb_cyc_o            (_u_sram_tester_wb_cyc_o),
    .wb_stb_o            (_u_sram_tester_wb_stb_o),
    .wb_adr_o            (_u_sram_tester_wb_adr_o),
    .wb_dat_o            (_u_sram_tester_wb_dat_o),
    .wb_sel_o            (_u_sram_tester_wb_sel_o),
    .wb_we_o             (_u_sram_tester_wb_we_o),
    .done                (_u_sram_tester_done),
    .error               (_u_sram_tester_error),
    .error_round         (/* unused */),
    .error_addr          (/* unused */),
    .error_read_data     (/* unused */),
    .error_expected_data (/* unused */)
  );
  wb_mux_2 wb_mux (
    .clk           (_clock_gen_clk_out1),
    .rst           (reset_of_clock10M),
    .wbm_adr_i     (_u_sram_tester_wb_adr_o),
    .wbm_dat_i     (_u_sram_tester_wb_dat_o),
    .wbm_we_i      (_u_sram_tester_wb_we_o),
    .wbm_sel_i     (_u_sram_tester_wb_sel_o),
    .wbm_stb_i     (_u_sram_tester_wb_stb_o),
    .wbm_cyc_i     (_u_sram_tester_wb_cyc_o),
    .wbs0_addr     (32'h80000000),
    .wbs0_addr_msk (32'hFFC00000),
    .wbs0_dat_i    (_sram_controller_base_io_wb_dat_o),
    .wbs0_ack_i    (_sram_controller_base_io_wb_ack_o),
    .wbs0_err_i    (1'h0),
    .wbs0_rty_i    (1'h0),
    .wbs1_addr     (32'h80400000),
    .wbs1_addr_msk (32'hFFC00000),
    .wbs1_dat_i    (_sram_controller_ext_io_wb_dat_o),
    .wbs1_ack_i    (_sram_controller_ext_io_wb_ack_o),
    .wbs1_err_i    (1'h0),
    .wbs1_rty_i    (1'h0),
    .wbm_dat_o     (_wb_mux_wbm_dat_o),
    .wbm_ack_o     (_wb_mux_wbm_ack_o),
    .wbm_err_o     (/* unused */),
    .wbm_rty_o     (/* unused */),
    .wbs0_adr_o    (_wb_mux_wbs0_adr_o),
    .wbs0_dat_o    (_wb_mux_wbs0_dat_o),
    .wbs0_we_o     (_wb_mux_wbs0_we_o),
    .wbs0_sel_o    (_wb_mux_wbs0_sel_o),
    .wbs0_stb_o    (_wb_mux_wbs0_stb_o),
    .wbs0_cyc_o    (_wb_mux_wbs0_cyc_o),
    .wbs1_adr_o    (_wb_mux_wbs1_adr_o),
    .wbs1_dat_o    (_wb_mux_wbs1_dat_o),
    .wbs1_we_o     (_wb_mux_wbs1_we_o),
    .wbs1_sel_o    (_wb_mux_wbs1_sel_o),
    .wbs1_stb_o    (_wb_mux_wbs1_stb_o),
    .wbs1_cyc_o    (_wb_mux_wbs1_cyc_o)
  );
  SramController sram_controller_base (
    .clock               (_clock_gen_clk_out1),
    .reset               (reset_of_clock10M),
    .io_wb_stb_i         (_wb_mux_wbs0_stb_o),
    .io_wb_cyc_i         (_wb_mux_wbs0_cyc_o),
    .io_wb_adr_i         (_wb_mux_wbs0_adr_o),
    .io_wb_we_i          (_wb_mux_wbs0_we_o),
    .io_wb_dat_i         (_wb_mux_wbs0_dat_o),
    .io_wb_sel_i         (_wb_mux_wbs0_sel_o),
    .io_sram_io_ram_data (base_ram_data),
    .io_wb_ack_o         (_sram_controller_base_io_wb_ack_o),
    .io_wb_dat_o         (_sram_controller_base_io_wb_dat_o),
    .io_sram_io_ram_addr (base_ram_addr),
    .io_sram_io_ram_be_n (base_ram_be_n),
    .io_sram_io_ram_ce_n (base_ram_ce_n),
    .io_sram_io_ram_oe_n (base_ram_oe_n),
    .io_sram_io_ram_we_n (base_ram_we_n)
  );
  SramController sram_controller_ext (
    .clock               (_clock_gen_clk_out1),
    .reset               (reset_of_clock10M),
    .io_wb_stb_i         (_wb_mux_wbs1_stb_o),
    .io_wb_cyc_i         (_wb_mux_wbs1_cyc_o),
    .io_wb_adr_i         (_wb_mux_wbs1_adr_o),
    .io_wb_we_i          (_wb_mux_wbs1_we_o),
    .io_wb_dat_i         (_wb_mux_wbs1_dat_o),
    .io_wb_sel_i         (_wb_mux_wbs1_sel_o),
    .io_sram_io_ram_data (ext_ram_data),
    .io_wb_ack_o         (_sram_controller_ext_io_wb_ack_o),
    .io_wb_dat_o         (_sram_controller_ext_io_wb_dat_o),
    .io_sram_io_ram_addr (ext_ram_addr),
    .io_sram_io_ram_be_n (ext_ram_be_n),
    .io_sram_io_ram_ce_n (ext_ram_ce_n),
    .io_sram_io_ram_oe_n (ext_ram_oe_n),
    .io_sram_io_ram_we_n (ext_ram_we_n)
  );
  assign leds = {14'h0, _u_sram_tester_error, _u_sram_tester_done};
  assign dpy0 = 8'h0;
  assign dpy1 = 8'h0;
  assign uart_rdn = 1'h1;
  assign uart_wrn = 1'h1;
endmodule


// ----- 8< ----- FILE "./TriStateGate.v" ----- 8< -----


module TriStateGate(triData, dataz, datain, dataout);
inout [31:0] triData;
input dataz;
input [31:0] datain;
output [31:0] dataout;

assign triData = dataz ? 32'bz : datain;
assign dataout = triData;

endmodule
        

// ----- 8< ----- FILE "firrtl_black_box_resource_files.f" ----- 8< -----

TriStateGate.v
